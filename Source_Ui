-- EnhancedUILibrary ModuleScript

local UILibrary = {}
UILibrary.__index = UILibrary

-- Services
local CoreGui = game:GetService("CoreGui")
local UserInputService = game:GetService("UserInputService")

--------------------------------------------------
-- Utility Functions
--------------------------------------------------

-- Helper to create new instances with property table
local function create(className, props)
    local instance = Instance.new(className)
    for prop, value in pairs(props or {}) do
        instance[prop] = value
    end
    return instance
end

-- Enables drag functionality for a given gui using a dragArea
local function enableDrag(guiObject, dragArea)
    local dragging, dragStart, startPos
    dragArea.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = guiObject.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    dragArea.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement and dragging then
            local delta = input.Position - dragStart
            guiObject.Position = UDim2.new(
                startPos.X.Scale,
                startPos.X.Offset + delta.X,
                startPos.Y.Scale,
                startPos.Y.Offset + delta.Y
            )
        end
    end)
end

--------------------------------------------------
-- Library Initialization and Base UI Creation
--------------------------------------------------

function UILibrary:Initialize(options)
    options = options or {}
    local defaultColors = {
        background  = Color3.fromRGB(20,20,20),
        topBar      = Color3.fromRGB(35,35,35),
        tabBar      = Color3.fromRGB(25,25,25),
        pages       = Color3.fromRGB(30,30,30),
        strokeMain  = Color3.fromRGB(80,255,80),
        strokeTab   = Color3.fromRGB(0,255,0),
        strokePages = Color3.fromRGB(0,255,255)
    }
    for key, value in pairs(defaultColors) do
        if not options[key] then options[key] = value end
    end
    self.options = options

    -- ScreenGui container
    self.screenGui = create("ScreenGui", {
        Name = "UILibraryScreen",
        ResetOnSpawn = false,
        Parent = CoreGui
    })

    -- Main Frame
    self.mainFrame = create("Frame", {
        Name = "MainFrame",
        Size = UDim2.new(0.8, 0, 0.8, 0),
        Position = UDim2.new(0.1, 0, 0.1, 0),
        BackgroundColor3 = options.background,
        BorderSizePixel = 0,
        ZIndex = 2,
        Parent = self.screenGui
    })
    create("UICorner", { CornerRadius = UDim.new(0, 6), Parent = self.mainFrame })
    create("UIStroke", {
        ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
        Thickness = 1,
        Color = options.strokeMain,
        Parent = self.mainFrame
    })
    -- Drop Shadow
    create("ImageLabel", {
        Name = "Shadow",
        AnchorPoint = Vector2.new(0.5, 0.5),
        Position = UDim2.new(0.5, 0, 0.5, 0),
        Size = UDim2.new(1, 30, 1, 30),
        ZIndex = 1,
        BackgroundTransparency = 1,
        Image = "rbxassetid://1316045217",
        ImageColor3 = Color3.fromRGB(0, 0, 0),
        ImageTransparency = 0.5,
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(10, 10, 118, 118),
        Parent = self.mainFrame
    })

    -- Top Bar with Title and Drag
    self.topBar = create("Frame", {
        Name = "TopBar",
        Size = UDim2.new(1, 0, 0, 30),
        BackgroundColor3 = options.topBar,
        BorderSizePixel = 0,
        ZIndex = 2,
        Parent = self.mainFrame
    })
    create("UICorner", { CornerRadius = UDim.new(0, 6), Parent = self.topBar })

    self.titleLabel = create("TextLabel", {
        Name = "TitleLabel",
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        Text = options.title or "Enhanced UI Library",
        Font = Enum.Font.SourceSansBold,
        TextSize = 18,
        TextColor3 = Color3.fromRGB(220, 220, 220),
        ZIndex = 3,
        Parent = self.topBar
    })
    create("UIGradient", {
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
            ColorSequenceKeypoint.new(0.5, Color3.fromRGB(0, 0, 255)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(238, 130, 238))
        }),
        Rotation = 25,
        Parent = self.titleLabel
    })

    enableDrag(self.mainFrame, self.topBar)

    -- Tab Bar is now a scrolling container to handle many tabs dynamically.
    self.tabBar = create("ScrollingFrame", {
        Name = "TabBar",
        Size = UDim2.new(0, 110, 1, -30),
        Position = UDim2.new(0, 0, 0, 30),
        BackgroundColor3 = options.tabBar,
        BorderSizePixel = 0,
        ZIndex = 2,
        ScrollingDirection = Enum.ScrollingDirection.Y,
        ScrollBarThickness = 5,
        CanvasSize = UDim2.new(0, 0, 0, 0),
        Parent = self.mainFrame,
        ScrollBarImageColor3 = Color3.fromRGB(120, 120, 120)
    })
    create("UICorner", { CornerRadius = UDim.new(0, 6), Parent = self.tabBar })
    create("UIStroke", {
        ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
        Thickness = 2,
        Color = options.strokeTab,
        Parent = self.tabBar
    })

    local tabListLayout = create("UIListLayout", {
        Name = "TabListLayout",
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 5),
        Parent = self.tabBar
    })
    -- Automatically update the canvas size of the scrolling frame.
    tabListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        self.tabBar.CanvasSize = UDim2.new(0, 0, 0, tabListLayout.AbsoluteContentSize.Y)
    end)

    -- Main Content Area
    self.pagesFrame = create("Frame", {
        Name = "Pages",
        Size = UDim2.new(1, -110, 1, -30),
        Position = UDim2.new(0, 110, 0, 30),
        BackgroundColor3 = options.pages,
        BorderSizePixel = 0,
        ZIndex = 2,
        Parent = self.mainFrame
    })
    create("UICorner", { CornerRadius = UDim.new(0, 6), Parent = self.pagesFrame })
    create("UIStroke", {
        ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
        Thickness = 2,
        Color = options.strokePages,
        Parent = self.pagesFrame
    })

    self.tabs = {}
    self.currentTab = nil

    -- Default toggle button for mobile/compact view
    self.toggleButton = create("TextButton", {
        Name = "DefaultToggleButton",
        Size = UDim2.new(0, 50, 0, 50),
        AnchorPoint = Vector2.new(0, 0.5),
        Position = UDim2.new(0, 10, 0.5, 0),
        BackgroundColor3 = Color3.fromRGB(40, 40, 40),
        BorderSizePixel = 0,
        Text = "â˜°",
        Font = Enum.Font.SourceSansBold,
        TextColor3 = Color3.new(1, 1, 1),
        TextScaled = true,
        ZIndex = 4,
        Parent = self.screenGui
    })
    self.toggleButton.MouseButton1Click:Connect(function()
        self.mainFrame.Visible = not self.mainFrame.Visible
    end)
end

--------------------------------------------------
-- Tab System
--------------------------------------------------

-- Shows the specified tab and hides others
function UILibrary:ShowTab(tabName)
    for name, tabData in pairs(self.tabs) do
        tabData.Page.Visible = (name == tabName)
        tabData.Button.BackgroundColor3 = (name == tabName) and Color3.fromRGB(50, 50, 50) or Color3.fromRGB(25, 25, 25)
    end
    self.currentTab = tabName
end

-- Creates a new tab with its own content page. Tabs are added to the scrolling list.
function UILibrary:CreateTab(tabName)
    local tabButton = create("TextButton", {
        Name = "TabButton_" .. tabName,
        Size = UDim2.new(1, 0, 0, 30),
        BackgroundColor3 = Color3.fromRGB(25, 25, 25),
        BorderSizePixel = 0,
        Text = tabName,
        TextColor3 = Color3.fromRGB(220, 220, 220),
        Font = Enum.Font.SourceSansBold,
        TextSize = 16,
        ZIndex = 3,
        Parent = self.tabBar
    })

    local pageFrame = create("Frame", {
        Name = "Page_" .. tabName,
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        Visible = false,
        ZIndex = 2,
        Parent = self.pagesFrame
    })

    self.tabs[tabName] = {
        Button = tabButton,
        Page = pageFrame
    }

    tabButton.MouseButton1Click:Connect(function()
        self:ShowTab(tabName)
    end)

    if not self.currentTab then
        self:ShowTab(tabName)
    end

    return pageFrame
end

-- Removes an existing tab and its associated page
function UILibrary:RemoveTab(tabName)
    local tabData = self.tabs[tabName]
    if tabData then
        if tabData.Button then
            tabData.Button:Destroy()
        end
        if tabData.Page then
            tabData.Page:Destroy()
        end
        self.tabs[tabName] = nil
        -- Optionally, update currentTab if needed.
        if self.currentTab == tabName then
            self.currentTab = nil
            -- Show any remaining tab.
            for name, _ in pairs(self.tabs) do
                self:ShowTab(name)
                break
            end
        end
    end
end

--------------------------------------------------
-- UI Element Creation Methods
--------------------------------------------------

-- Creates a gradient button with hover effects
function UILibrary:CreateButton(parent, text, callback)
    local button = create("TextButton", {
        Name = "Button_" .. (text or "Button"),
        Size = UDim2.new(0, 150, 0, 40),
        BackgroundColor3 = Color3.fromRGB(40, 40, 40),
        BorderSizePixel = 0,
        Text = text or "Button",
        TextScaled = true,
        Font = Enum.Font.SourceSansBold,
        TextColor3 = Color3.fromRGB(255, 255, 255),
        ZIndex = 3,
        Parent = parent
    })
    create("UICorner", { CornerRadius = UDim.new(0, 4), Parent = button })
    local stroke = create("UIStroke", {
        ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
        Thickness = 1,
        Color = Color3.fromRGB(80, 80, 80),
        Parent = button
    })
    create("UIGradient", {
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
            ColorSequenceKeypoint.new(0.5, Color3.fromRGB(0, 0, 255)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(238, 130, 238))
        }),
        Rotation = 45,
        Parent = button
    })
    button.MouseEnter:Connect(function()
        stroke.Color = Color3.fromRGB(120, 120, 120)
    end)
    button.MouseLeave:Connect(function()
        stroke.Color = Color3.fromRGB(80, 80, 80)
    end)
    button.MouseButton1Click:Connect(function()
        if callback then callback() end
    end)
    return button
end

-- Creates a slider component
function UILibrary:CreateSlider(parent, labelText)
    local container = create("Frame", {
        Name = "Slider_" .. (labelText or "Slider"),
        Size = UDim2.new(0, 200, 0, 50),
        BackgroundTransparency = 1,
        ZIndex = 2,
        Parent = parent
    })
    create("TextLabel", {
        Name = "SliderLabel",
        Size = UDim2.new(1, 0, 0, 20),
        BackgroundTransparency = 1,
        Text = labelText or "Slider",
        TextColor3 = Color3.fromRGB(220, 220, 220),
        Font = Enum.Font.SourceSans,
        TextSize = 16,
        ZIndex = 3,
        Parent = container
    })
    local sliderBG = create("Frame", {
        Name = "SliderBG",
        Size = UDim2.new(1, -20, 0, 10),
        Position = UDim2.new(0, 10, 0, 30),
        BackgroundColor3 = Color3.fromRGB(60, 60, 60),
        BorderSizePixel = 0,
        ZIndex = 3,
        Parent = container
    })
    create("UICorner", { CornerRadius = UDim.new(0, 4), Parent = sliderBG })
    local fill = create("Frame", {
        Name = "Fill",
        Size = UDim2.new(0.5, 0, 1, 0),
        BackgroundColor3 = Color3.fromRGB(220, 220, 220),
        BorderSizePixel = 0,
        ZIndex = 4,
        Parent = sliderBG
    })
    create("UICorner", { CornerRadius = UDim.new(0, 4), Parent = fill })
    return container
end

-- Creates an integer input box component
function UILibrary:CreateIntBox(parent, labelText)
    local container = create("Frame", {
        Name = "IntBox_" .. (labelText or "IntBox"),
        Size = UDim2.new(0, 200, 0, 50),
        BackgroundTransparency = 1,
        ZIndex = 2,
        Parent = parent
    })
    create("TextLabel", {
        Name = "IntBoxLabel",
        Size = UDim2.new(0.4, 0, 1, 0),
        BackgroundTransparency = 1,
        Text = labelText or "IntBox",
        TextColor3 = Color3.fromRGB(220, 220, 220),
        Font = Enum.Font.SourceSans,
        TextSize = 16,
        ZIndex = 3,
        Parent = container
    })
    local box = create("TextBox", {
        Name = "Box",
        Size = UDim2.new(0.6, 0, 0.6, 0),
        Position = UDim2.new(0.4, 0, 0.2, 0),
        BackgroundColor3 = Color3.fromRGB(40, 40, 40),
        BorderSizePixel = 0,
        Text = "",
        PlaceholderText = "Number",
        TextColor3 = Color3.fromRGB(220, 220, 220),
        Font = Enum.Font.SourceSans,
        TextSize = 16,
        ZIndex = 3,
        Parent = container
    })
    create("UICorner", { CornerRadius = UDim.new(0, 4), Parent = box })
    create("UIStroke", {
        ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
        Thickness = 1,
        Color = Color3.fromRGB(60, 60, 60),
        Parent = box
    })
    return container
end

-- Creates a selection dropdown component
function UILibrary:CreateSelectionBox(parent, labelText, options)
    local container = create("Frame", {
        Name = "SelectionBox_" .. (labelText or "Selection"),
        Size = UDim2.new(0, 200, 0, 50),
        BackgroundTransparency = 1,
        ZIndex = 2,
        Parent = parent
    })
    create("TextLabel", {
        Name = "SelectionLabel",
        Size = UDim2.new(0.4, 0, 1, 0),
        BackgroundTransparency = 1,
        Text = labelText or "Select",
        TextColor3 = Color3.fromRGB(220, 220, 220),
        Font = Enum.Font.SourceSans,
        TextSize = 16,
        ZIndex = 3,
        Parent = container
    })
    local dropdown = create("TextButton", {
        Name = "Dropdown",
        Size = UDim2.new(0.6, 0, 0.6, 0),
        Position = UDim2.new(0.4, 0, 0.2, 0),
        BackgroundColor3 = Color3.fromRGB(40, 40, 40),
        BorderSizePixel = 0,
        Text = (options and options[1]) or "Option 1",
        TextColor3 = Color3.fromRGB(220, 220, 220),
        Font = Enum.Font.SourceSans,
        TextSize = 16,
        ZIndex = 3,
        Parent = container
    })
    create("UICorner", { CornerRadius = UDim.new(0, 4), Parent = dropdown })
    create("UIStroke", {
        ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
        Thickness = 1,
        Color = Color3.fromRGB(60, 60, 60),
        Parent = dropdown
    })
    return container
end

--------------------------------------------------
-- Return the Library
--------------------------------------------------

return UILibrary
